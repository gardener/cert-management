// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/gardener/cert-management/pkg/apis/cert/v1alpha1"
	certv1alpha1 "github.com/gardener/cert-management/pkg/client/cert/clientset/versioned/typed/cert/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeCertificateRevocations implements CertificateRevocationInterface
type fakeCertificateRevocations struct {
	*gentype.FakeClientWithList[*v1alpha1.CertificateRevocation, *v1alpha1.CertificateRevocationList]
	Fake *FakeCertV1alpha1
}

func newFakeCertificateRevocations(fake *FakeCertV1alpha1, namespace string) certv1alpha1.CertificateRevocationInterface {
	return &fakeCertificateRevocations{
		gentype.NewFakeClientWithList[*v1alpha1.CertificateRevocation, *v1alpha1.CertificateRevocationList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("certificaterevocations"),
			v1alpha1.SchemeGroupVersion.WithKind("CertificateRevocation"),
			func() *v1alpha1.CertificateRevocation { return &v1alpha1.CertificateRevocation{} },
			func() *v1alpha1.CertificateRevocationList { return &v1alpha1.CertificateRevocationList{} },
			func(dst, src *v1alpha1.CertificateRevocationList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.CertificateRevocationList) []*v1alpha1.CertificateRevocation {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.CertificateRevocationList, items []*v1alpha1.CertificateRevocation) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
