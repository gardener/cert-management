// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/gardener/cert-management/pkg/apis/cert/v1alpha1"
	certv1alpha1 "github.com/gardener/cert-management/pkg/client/cert/clientset/versioned/typed/cert/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeCertificates implements CertificateInterface
type fakeCertificates struct {
	*gentype.FakeClientWithList[*v1alpha1.Certificate, *v1alpha1.CertificateList]
	Fake *FakeCertV1alpha1
}

func newFakeCertificates(fake *FakeCertV1alpha1, namespace string) certv1alpha1.CertificateInterface {
	return &fakeCertificates{
		gentype.NewFakeClientWithList[*v1alpha1.Certificate, *v1alpha1.CertificateList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("certificates"),
			v1alpha1.SchemeGroupVersion.WithKind("Certificate"),
			func() *v1alpha1.Certificate { return &v1alpha1.Certificate{} },
			func() *v1alpha1.CertificateList { return &v1alpha1.CertificateList{} },
			func(dst, src *v1alpha1.CertificateList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.CertificateList) []*v1alpha1.Certificate {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.CertificateList, items []*v1alpha1.Certificate) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
