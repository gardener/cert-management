// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	certv1alpha1 "github.com/gardener/cert-management/pkg/apis/cert/v1alpha1"
	scheme "github.com/gardener/cert-management/pkg/client/cert/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// CertificateRevocationsGetter has a method to return a CertificateRevocationInterface.
// A group's client should implement this interface.
type CertificateRevocationsGetter interface {
	CertificateRevocations(namespace string) CertificateRevocationInterface
}

// CertificateRevocationInterface has methods to work with CertificateRevocation resources.
type CertificateRevocationInterface interface {
	Create(ctx context.Context, certificateRevocation *certv1alpha1.CertificateRevocation, opts v1.CreateOptions) (*certv1alpha1.CertificateRevocation, error)
	Update(ctx context.Context, certificateRevocation *certv1alpha1.CertificateRevocation, opts v1.UpdateOptions) (*certv1alpha1.CertificateRevocation, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, certificateRevocation *certv1alpha1.CertificateRevocation, opts v1.UpdateOptions) (*certv1alpha1.CertificateRevocation, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*certv1alpha1.CertificateRevocation, error)
	List(ctx context.Context, opts v1.ListOptions) (*certv1alpha1.CertificateRevocationList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *certv1alpha1.CertificateRevocation, err error)
	CertificateRevocationExpansion
}

// certificateRevocations implements CertificateRevocationInterface
type certificateRevocations struct {
	*gentype.ClientWithList[*certv1alpha1.CertificateRevocation, *certv1alpha1.CertificateRevocationList]
}

// newCertificateRevocations returns a CertificateRevocations
func newCertificateRevocations(c *CertV1alpha1Client, namespace string) *certificateRevocations {
	return &certificateRevocations{
		gentype.NewClientWithList[*certv1alpha1.CertificateRevocation, *certv1alpha1.CertificateRevocationList](
			"certificaterevocations",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *certv1alpha1.CertificateRevocation { return &certv1alpha1.CertificateRevocation{} },
			func() *certv1alpha1.CertificateRevocationList { return &certv1alpha1.CertificateRevocationList{} },
		),
	}
}
