// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1alpha1 "github.com/gardener/cert-management/pkg/apis/cert/v1alpha1"
	scheme "github.com/gardener/cert-management/pkg/client/cert/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// IssuersGetter has a method to return a IssuerInterface.
// A group's client should implement this interface.
type IssuersGetter interface {
	Issuers(namespace string) IssuerInterface
}

// IssuerInterface has methods to work with Issuer resources.
type IssuerInterface interface {
	Create(ctx context.Context, issuer *v1alpha1.Issuer, opts v1.CreateOptions) (*v1alpha1.Issuer, error)
	Update(ctx context.Context, issuer *v1alpha1.Issuer, opts v1.UpdateOptions) (*v1alpha1.Issuer, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, issuer *v1alpha1.Issuer, opts v1.UpdateOptions) (*v1alpha1.Issuer, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.Issuer, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.IssuerList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.Issuer, err error)
	IssuerExpansion
}

// issuers implements IssuerInterface
type issuers struct {
	*gentype.ClientWithList[*v1alpha1.Issuer, *v1alpha1.IssuerList]
}

// newIssuers returns a Issuers
func newIssuers(c *CertV1alpha1Client, namespace string) *issuers {
	return &issuers{
		gentype.NewClientWithList[*v1alpha1.Issuer, *v1alpha1.IssuerList](
			"issuers",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1alpha1.Issuer { return &v1alpha1.Issuer{} },
			func() *v1alpha1.IssuerList { return &v1alpha1.IssuerList{} }),
	}
}
